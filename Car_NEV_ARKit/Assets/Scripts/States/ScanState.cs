using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.iOS;

public class ScanState : FSMState
{
    public ScanState(IStateControl control)
    {
        this.stateID = StateID.StartScan;
        this.control = control;
    }

    public Transform m_HitTransform;
    public float maxRayDistance = 30.0f;
    public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer

    ScanControl sc;

    //ARkit的Hit
    bool HitTestWithResultType(ARPoint point, ARHitTestResultType resultTypes)
    {
        List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, resultTypes);
        if( hitResults.Count > 0 )
        {
            foreach( var hitResult in hitResults )
            {
                Debug.Log("Got hit!");
                m_HitTransform.position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);
                m_HitTransform.rotation = UnityARMatrixOps.GetRotation(hitResult.worldTransform);
                Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
                return true;
            }
        }
        return false;
    }

    //检测射线放置物体
    public void PlaceObject()
    {
#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
        if( Input.GetMouseButtonDown(0) )
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit;

            //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
            //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
            if( Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer) )
            {
                m_HitTransform.gameObject.SetActive(true); //将E6开启

                //we're going to get the position from the contact point
                m_HitTransform.position = hit.point;
                Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

                //and the rotation from the transform of the plane collider
                m_HitTransform.rotation = hit.transform.rotation;
            }
        }
#else
			if (Input.touchCount > 0 && m_HitTransform != null)
			{
				var touch = Input.GetTouch(0);
				if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved)
				{
                    m_HitTransform.gameObject.SetActive(true); //将E6开启

					var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
					ARPoint point = new ARPoint {
						x = screenPosition.x,
						y = screenPosition.y
					};

                    // prioritize reults types
                    ARHitTestResultType[] resultTypes = {
                        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
                        // if you want to use infinite planes use this:
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                        ARHitTestResultType.ARHitTestResultTypeHorizontalPlane, 
                        ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                    }; 
					
                    foreach (ARHitTestResultType resultType in resultTypes)
                    {
                        if (HitTestWithResultType (point, resultType))
                        {
                            return;
                        }
                    }
				}
			}
#endif

    }

    //放置按钮-按下
    public void PlaceBtn_Click()
    {
#if UNITY_EDITOR
        Ray ray = Camera.main.ViewportPointToRay(new Vector3(0.5f, 0.5f, 0));
        RaycastHit hit;

        if( Physics.Raycast(ray, out hit, 100, collisionLayer) )
        {
            m_HitTransform.gameObject.SetActive(true);  //开启物体

            m_HitTransform.position = hit.point;
            m_HitTransform.rotation = hit.transform.rotation;
        }
#else
        m_HitTransform.gameObject.SetActive(true); //将E6开启

        Vector2 viewPoint = new Vector2(0.5f, 0.5f);  //摄像机中心
        ARPoint point = new ARPoint
        {
            x = viewPoint.x,
            y = viewPoint.y
        };

        // prioritize reults types
        ARHitTestResultType[] resultTypes = {
                        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
                        // if you want to use infinite planes use this:
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                        ARHitTestResultType.ARHitTestResultTypeHorizontalPlane,
                        ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                    };

        foreach( ARHitTestResultType resultType in resultTypes )
        {
            if( HitTestWithResultType(point, resultType) )
            {
                return;
            }
        }
#endif
    }

    public override void DoBeforeEntering()
    {
        base.DoBeforeEntering();

        if( m_HitTransform == null )
        {
            sc = control as ScanControl;
            m_HitTransform = sc.E6;      //将E6传过来
        }

        m_HitTransform.gameObject.SetActive(false);    //将E6隐藏
    }

    public override void DoUpdate()
    {
        //E6没有放置
        if( m_HitTransform.gameObject.activeInHierarchy == false )
        {
            //PlaceObject();
        }
        else   //放置完毕
        {
            sc.Adjust_Update();
        }
    }
}